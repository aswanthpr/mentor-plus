"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const multer_1 = __importDefault(require("../Middleware/multer."));
const qaController_1 = __importDefault(require("../Controller/implementation/qaController"));
const mentorController_1 = require("../Controller/implementation/mentorController");
const bookingController_1 = require("../Controller/implementation/bookingController");
const chatController_1 = require("../Controller/implementation/chatController");
const notificationController_1 = require("../Controller/implementation/notificationController");
const qaService_1 = __importDefault(require("../Service/implementation/qaService"));
const chatService_1 = __importDefault(require("../Service/implementation/chatService"));
const mentorService_1 = require("../Service/implementation/mentorService");
const bookingService_1 = require("../Service/implementation/bookingService");
const notificationService_1 = require("../Service/implementation/notificationService");
const chatRepository_1 = __importDefault(require("../Repository/implementation/chatRepository"));
const mentorRepository_1 = __importDefault(require("../Repository/implementation/mentorRepository"));
const answerRepository_1 = __importDefault(require("../Repository/implementation/answerRepository"));
const questionRepository_1 = __importDefault(require("../Repository/implementation/questionRepository"));
const categoryRepository_1 = __importDefault(require("../Repository/implementation/categoryRepository"));
const timeSlotRepository_1 = __importDefault(require("../Repository/implementation/timeSlotRepository"));
const slotScheduleRepository_1 = __importDefault(require("../Repository/implementation/slotScheduleRepository"));
const notificationRepository_1 = __importDefault(require("../Repository/implementation/notificationRepository"));
const walletRepository_1 = __importDefault(require("../Repository/implementation/walletRepository"));
const transactionRepository_1 = __importDefault(require("../Repository/implementation/transactionRepository"));
const walletController_1 = require("../Controller/implementation/walletController");
const walletService_1 = require("../Service/implementation/walletService");
const authorizeUser_1 = __importDefault(require("../Middleware/authorizeUser"));
const __mentorService = new mentorService_1.mentorService(mentorRepository_1.default, categoryRepository_1.default, questionRepository_1.default, timeSlotRepository_1.default, slotScheduleRepository_1.default);
const __chatService = new chatService_1.default(chatRepository_1.default);
const __qaService = new qaService_1.default(questionRepository_1.default, answerRepository_1.default, notificationRepository_1.default);
const __bookingService = new bookingService_1.bookingService(timeSlotRepository_1.default, slotScheduleRepository_1.default, notificationRepository_1.default, chatRepository_1.default, walletRepository_1.default, transactionRepository_1.default);
const __notificationService = new notificationService_1.notificationService(notificationRepository_1.default);
const __walletService = new walletService_1.walletService(walletRepository_1.default, transactionRepository_1.default, notificationRepository_1.default);
const __walletController = new walletController_1.walletController(__walletService);
const __mentorController = new mentorController_1.mentorController(__mentorService);
const __qaController = new qaController_1.default(__qaService);
const __bookingController = new bookingController_1.bookingControlelr(__bookingService);
const __notificationController = new notificationController_1.notificationController(__notificationService);
const __chatController = new chatController_1.chatController(__chatService);
const mentor_Router = express_1.default.Router();
mentor_Router.post(`/logout`, __mentorController.mentorLogout.bind(__mentorController));
//profile
mentor_Router.get(`/profile`, (0, authorizeUser_1.default)('mentor'), __mentorController.mentorProfile.bind(__mentorController));
mentor_Router.patch(`/profile/change_password`, (0, authorizeUser_1.default)('mentor'), __mentorController.profilePasswordChange.bind(__mentorController));
mentor_Router.post("/refresh-token", __mentorController.mentorRefreshToken.bind(__mentorController));
mentor_Router.patch(`/profile/image_change`, (0, authorizeUser_1.default)('mentor'), multer_1.default.fields([{ name: "profileImage", maxCount: 1 }]), __mentorController.mentorProfileImageChange.bind(__mentorController));
mentor_Router.put(`/profile/edit_profile_details`, multer_1.default.fields([{ name: "resume", maxCount: 1 }]), __mentorController.mentorEditProfile.bind(__mentorController));
mentor_Router.get(`/home/:filter`, (0, authorizeUser_1.default)('mentor'), __mentorController.questionData.bind(__mentorController));
mentor_Router.post(`/qa/create-new-answer`, (0, authorizeUser_1.default)('mentor'), __qaController.createNewAnswer.bind(__qaController));
mentor_Router.patch(`/qa/edit-answer`, (0, authorizeUser_1.default)('mentor'), __qaController.editAnswer.bind(__qaController));
//schedule
mentor_Router.post(`/schedule/create-slots`, (0, authorizeUser_1.default)('mentor'), __mentorController.createTimeSlots.bind(__mentorController));
mentor_Router.get(`/schedule/get-time-slots`, (0, authorizeUser_1.default)('mentor'), __mentorController.getTimeSlots.bind(__mentorController));
mentor_Router.delete(`/schedule/remove-time-slot`, (0, authorizeUser_1.default)('mentor'), __mentorController.removeTimeSlot.bind(__mentorController));
mentor_Router.get(`/sessions`, (0, authorizeUser_1.default)('mentor'), __bookingController.getBookedSession.bind(__bookingController));
mentor_Router.patch(`/sessions/cancel_request/:sessionId`, (0, authorizeUser_1.default)('mentor'), __bookingController.mentorSlotCancel.bind(__bookingController));
mentor_Router.patch(`/sessions/create-session-code`, (0, authorizeUser_1.default)('mentor'), __bookingController === null || __bookingController === void 0 ? void 0 : __bookingController.createSessionCode.bind(__bookingController));
mentor_Router.patch(`/sessions/mark-as-session-completed`, (0, authorizeUser_1.default)('mentor'), __bookingController.sessionCompleted.bind(__bookingController));
//notification
mentor_Router.get(`/notification`, (0, authorizeUser_1.default)('mentor'), __notificationController === null || __notificationController === void 0 ? void 0 : __notificationController.getNotification.bind(__notificationController));
mentor_Router.patch(`/notification-read/:notificationId`, (0, authorizeUser_1.default)('mentor'), __notificationController.markAsReadNotif.bind(__notificationController));
//chat
mentor_Router.get(`/chats`, (0, authorizeUser_1.default)('mentor'), __chatController.getChats.bind(__chatController));
mentor_Router.get("/messages", (0, authorizeUser_1.default)('mentor'), __chatController.getUserMessage.bind(__chatController));
mentor_Router.get("/session/validate-session-join", (0, authorizeUser_1.default)('mentor'), __bookingController.validateSessionJoin.bind(__bookingController));
//wallet'
mentor_Router.get(`/wallet`, (0, authorizeUser_1.default)('mentor'), __walletController.getWalletData.bind(__walletController));
mentor_Router.put(`/withdraw-amount`, (0, authorizeUser_1.default)('mentor'), __walletController.withdrawMentorEarnings.bind(__walletController));
mentor_Router.get(`/statistics`, (0, authorizeUser_1.default)('mentor'), __mentorController.chartData.bind(__mentorController));
mentor_Router.get("/turn-credentials", (0, authorizeUser_1.default)('mentor'), __bookingController.turnServerConnection.bind(__bookingController));
exports.default = mentor_Router;
